user interfaces -> browsers, mobile, cars, desktop, tv, appliancess

servers -> APIs, logging, authentication, development platform, 

database -< structures data storage , data analytics

// popular stack 
mean -> mongo, express, angular, node.js
mern -> mongo, express, react, notejs
lamp -> linux, apache, mysql, php


// full stack is an engineer who can controll fronten and backend at both hand 

->->->

terminal -> fast -consistent -> low overhead

// servers 
/// what is a server? 
-> A server is a computer program or device that provides a service to another computer program and its user, also known as the client
-> make basic 



// cloud computing
-> Now, we can firm all that work out to companies andpeople that know what they're doing a lot better than we do.Companies like AWS, or DigitalOcean, or Rackspace, ora lot of cloud hosting providers.And that's all cloud computing is.It's just the idea that there's this massive pile of servers somewhere andwe can borrow some time from them or we can install our applications on that.

virtualization: dividing a server resources into cirtual computers

virtual machine -> digital version of physical computer 


// vps _. virtual private server



// operating systems

user -> shell -> kernel -> hardware

// ssh  and hashing

-? security -> username/passwd 
            -> biometric
            -> ssh key                                                                                                                                                                                                

        openssl md5 {file to hash}
        openssl sha1 {file to hash}
        openssl sha256 {file to hash}

        https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html


        salt
        salted hash

            [input] + [salt] + [hashFunction] = [salted hash]
            [./foo] + [salt] + [sha1] = [   ??   ]


eliptical curve cryptography
// https://www.pingidentity.com/en/resources/blog/post/encryption-vs-hashing-vs-salting.html

// sha256 or something more complex would be better than md5

// supply chain security


What is ransomware?>> Software that gets maliciously installed on in a computersystem that encrypts all the data on that system.



// ssh -> secure socket shell


                -> public key
ssh key pair ->>
                -> private key


                There's the public part, which is something I can share out to anybody.I can share, give you my public key, post it on the Internet,post it on Twitter, it doesn't really matter, it's a public key.Then you have your private key, the private key is known only to me.The public key is used to encrypt any sort of data, any sort of message you want.And I think of it as a hashing function, or as the Psalter hashing function.But the great thing is, anybody can encrypt this message and send it to me,but I'm the only one that can decrypt it.Now, think how powerful that is.I can send a message in broad open, I can shout it from the streets, andno one will know what I'm saying other than me,because I'm the only one who can decrypt that


// cd ~/.ssh 
// ssh-keygen 



-> .ssh$ ls | grep fsfe 
fsfe <-------private key
fsfe.pub <------- public key  


///
fsfe is just project name, it can be anything like you set that

setup ssh key for logging

ssh into your server 
``` ssh root@<you_IP> ```

ssh into your server your private key
``` ssh -i ~/.ssh/fsfe root@<you_IP>

exiting your server
``` exit ```



// one more time 

move to .ssh directory 
 -> ssh-keygen -> give name later 




 // make sure keychain is active 
    vi ~/.ssh/config  -> if it does not exist, jst create 

// make sure 

``` Host*
     AddKeysToAgent yes
     UseKeychain yes 
```

these above should be yes


// add private key to keychain
    ssh-add --apple-use-keychain fsfe




/// how internet works

 the internet is nuilt on cooperation and rules

 the very simplified diagram of how requests work

 computer 
    |
    |                               server
    ▽                                 ^  
network card                           |
    |                                  |
    |                             load balancer 
    ▽                                 ^
  router                               |
    |                                  |
    |                             server cluster 
    ▽
   ISP                                 ^
    |                                  |
    |                                  |                                        
    ▽                                  
  Tier 1 ISP ———→  Tier 1 ISP   ———→ Datacenter

  what is router!!!!


  terminology 

  internet -> a network of networks
  intranet - private network
  LAN -> local area network 
  WAN -> wide are network





IP -> internet protocol
IP address -> numeric label assigned to an internet connected device 

  IPv4              ipv6 
  8.8.8.8         2001:4860:4860:8888


network tool : ping 


check the status of a network host 
    ping google.com


follow the path of your request 
    traceroute google.com

show network status 
    netstat -lt | less



//terms

TCP -> transmission control protocol
UDP -> user diagram protocol
ICMP -> internet control message protocol

Packet -> unit of data transmitted over a network 


// well TCp is alway gonna be most reliable connection 
TCp has what is called handshake 


// https://www.cloudflare.com/learning/ddos/glossary/user-datagram-protocol-udp/



// DNS and URLs 

How the domains work ?

DNS -> domain name systems
Nameserver -> hold DNS records to translate domain names into ip addresses


// DNS recors 

A record -> maps name to Ip addresses 
CNAME -> maps name to name 


Lookuo the Nameserver for a domain  
    nslookup frontendmasters.com

lookup the dns records for a domain
    dig frontendmasters.com


viev browser DNS cache 

chrome -> chrome://net-internals/#dns
firefox -> about:networking#dns 


// why one domain name could have multiple IP adresses ?
cuz it means they are hosted on different servers



//// Anatomy of a URLs
URL -> uniform resource locator


blog.yourdomain.com/en/fullstack?test=true     |
|     subdomain    |    path    |queryParameter|
               |tld|
    |    domain    |


tld -> top level domain



// brand new server 

- update server 
- restart your server 
- create a new user 
- make that user a superuser
- enable login for new user 
- disable root login#



updating and restaring 

apt update
apt upgrade
shutdown now -r 

root -> highest permission level, allows unrestricted access to the OS 
sudo -> super user do, Allows to run commands and programs as root


create a new user 
    adduser <your_username>

add user to 'sudo' group
    usermod -aG sudo <your_username>

switch user
    su <your_username>

check sudo access 
    sudo cat /var/log/auth.log

create authorized_keys file 
    ~/.ssh/authorized_keys

paste your public key

exit

Log with new user 



//// web servers

Apache, Nginx


// Nginx  -> wev server, reverse proxy, forward proxy 



install nginx 
    sudo apt install nginx

start nginx 
    sudo service nginx start

navigate to your browser with your api 




// node js 

link to newest node.js source 
    curl https://deb.nodesource.com/setup_19.x | sudo -E bash -

install  node.js
    sudo apt-get install nodejs


install git 
    sudo apt install git 

Application setup 

    Establlish application file system
    enable version control
    Create a node.js server




Change ownership if /www
    sudo chown -R $USER:$USER /var/www

make an application directory
    mkdir /var/www/app

initialize empty git repo in /app
    git init


create app file
    touch app.js

initialize project 
    npm init


create a basic node server in app.js

start your application


basic node server :

    const http = require("http");

    http.createServer (function (req, res) {

    res.write("On the way to being a full stack engineer!");
    res.end();

    }).1listen(3000);

    console.log("Server started on port 3000");


Proxy pass 
    location / {
        proxy_pass URl_TO_PROXY_TO;
    }


    create a new nginx server and proxy 
        sudo vi /etc.nginx/sites-enabled/<name>



        server {

                listen 80 default_server;
                listen [::]:80 default_server;

                root /var/www/html;
                index index.html;

                server_name <your_domain>;

                location / {
                    proxy_pass http://138.68.95.204/
                }
        }


    Point nginx to new server 
    sudo vi /etc/nginx/nginx.config

        ##
        # Virtual Host Configs
        ##

        include /etc/nginx/conf.d/*. conf;
        include /etc/nginx/sites-enabled/fsfe;




// istall PM2[is gonna help out node application up and running even if we close the shell or even if wwe close the exit the terminal]

    install PM2 
        sudo npm i -g pm2 

    start PM2 
        pm2 start app.js -watch

    setup auto restart
        pm save 



Git 

    create a git repository 
    create an ssh key called gh_key
    add the ssh key to github
    add remote repo
    ensure new ssh key is used 
    push local repo to github

Version control -> record changes to a file system to preserve history 

git, 
subVersion
mercurial


//


hwat could someone do if they gained root access to your server


ssh
firewalls
updates
two factor authentication
vpn




port - communication enpoint that  maps to specific process or network service



see well known parts 
    less /etc/service


// nmap

install nmap 
    sudo apt install nmap 

run nmap 
    nmap <your server api>

extra service/version information
    nmap -sV <your sever api>



    if we run nmap with api adresses
    , there is port 3000(node) is open but it should not be , 






firewalls

--- a network security device that monitors incoming and outgoing network traffic and decides whether to alow or blokc specific traffic based on a defined set of security rules 



-> ufw
------- uncomplicated firewall


              http
              https  
   $ ufw allow ssh 
        deny
        reject 

    

     check firewall status
        sudo ufw status
    
    allow ssh 
        sudo ufw allow ssh 
    
    allow http 
        sudo ufw allow http
    
    enable firewall 
        sudo ufw enable


    how would we create a ufw rule to block all http connections?




permission

    owner  group   everyone 
                     else 

     rwx    rwx       rwx 
     421    421       421
      7      7         7


     read      4
     write     2
     execute   1


    https://quickref.me/chmod




unattended upgrades

    uplication updates


    install unattended upgrades
        sudo apt install unattended-uprgrades

    enable upgrades 
        sudo dpkg-reconfigure --priority=low unattended-upgrades



term -> LTS -> long term support





contigious integration & deployment 

    CI/CD 

        continuous integration - code changes are validated and merged back into main branch  as often as possible 

        continuous delivery - code changes are automatically built and ready for production

        continuous deployment - builds are automatically deployed to production environments


        https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment

        https://spinnaker.io/



    Cron for CI

        cron -> executes commands on a schedule 
            0 10 * * 1-5 sh ./myscriptt.sh
            ```run ./myscriptt.js at 10:00 on every day of week from monday through friday 



    1.create a bashscript that git pulls from main branch 

    2.create a cron jonb to execute script every 2 minutes

    


    * * * * * sh /path/to/script 

    first * : minutes
    second* : hour
    third * : month
    fourth * : day 
    fifth * : day 
    sh : use bash


    show cronjobs
        crontab -e


    crontab.guru




    Logging  , streams, redirections


    /var/log/     
                syslog
                auth.log
                nginx/access.log


    tail - last part of a file 
    head - first part of the file 
    less - output one page  at time 
    cat - output entire file


    tail -f -> follow the output of the file 


    standard streams :
        standard ouput 
            stout 

        standard input 
            stdin 

        standard error
            sderr

    


    | -> read from stdout 
    > -> overwrites
    >> -> append 
    <  -> read fro stdin 
    2>&1  -> redirect both stdin and stdout 




    find / grep

    find -> search file Names

    grep -> search file contents 

      

      $ find     /bar    -name    foo.txt
      | find | directory| option | file/holder

    

    find all log files in /var/log
        find /var/log -type f -name "*.log"

    find all dirs with the name log 
        find / -type d -name log


    sudo !! -> rerun the last command with sudo perm 


    Grep -> 

    $ grep    -i      "tidalu"     8/var/www
    | grep | options | search exp | directory 


    $ zgrep file  -> search inside gzip file 


    find running node processes
        ps aux | grep node



    nginx 


    // how to do redirectio in nginx 
        location /help {
            return 301 https://developer.mozilla.org/en-US/;
        }


    Gzip 

    /etx/nginx/nginx.conf

    